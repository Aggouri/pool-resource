#!/bin/sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/pool-resource-request.XXXXXX)

cat > $payload <&0

load_pubkey $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
pool_name=$(jq -r '.source.pool // ""' < $payload)
ref=$(jq -r '.version.ref // "HEAD"' < $payload)

if [ -z "$uri" ]; then
  config_errors="${config_errors}invalid payload (missing uri)\n"
fi

if [ -z "$branch" ]; then
  config_errors="${config_errors}invalid payload (missing branch)\n"
fi

if [ -z "$pool_name" ]; then
  config_errors="${config_errors}invalid payload (missing pool)\n"
fi

if [ -n "$config_errors" ]; then
  echo $config_errors
  exit 1
fi

branchflag=""
if [ -n "$branch" ]; then
  branchflag="--branch $branch"
fi

git clone $uri $branchflag $destination

cd $destination

git checkout -q $ref
git log -1 --oneline
git clean --force --force -d

changed_filepath=$(git diff --name-only HEAD~1 | head -1)
changed_filename=$(echo $changed_filepath | rev | cut -d "/" -f 1 | rev)

jq -n "{
  version: {ref: $(git rev-parse HEAD | jq -R .)},
  metadata: [{
    \"name\": \"lock_name\",
    \"value\": \"$changed_filename\"
  },{
    \"name\": \"pool_name\",
    \"value\": \"$pool_name\"
  }]
}" >&3

mkdir -p $1

cat ${changed_filepath} > ${1}/metadata
echo ${changed_filename} > ${1}/name
